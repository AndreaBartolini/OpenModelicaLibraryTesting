pipeline {
  agent none
  parameters {
    booleanParam(name: 'OLDLIBS', defaultValue: false, description: 'Also test some outdated libraries')

    booleanParam(name: 'v1_8_1_rml', defaultValue: false, description: 'v1.8.1 release using RML (lib)')
    booleanParam(name: 'v1_9_0_rml', defaultValue: false, description: 'v1.9.0 release using RML (lib)')
    booleanParam(name: 'v1_9_1', defaultValue: false, description: 'v1.9.1 release branch (lib)')
    booleanParam(name: 'v1_9_2', defaultValue: false, description: 'v1.9.2 release branch (lib)')
    booleanParam(name: 'v1_9_3', defaultValue: false, description: 'v1.9.3 release branch (lib)')

    booleanParam(name: 'v1_9', defaultValue: false, description: 'maintenance/v1.9 branch (lib)')
    booleanParam(name: 'v1_11', defaultValue: false, description: 'maintenance/v1.11 branch (lib)')
    booleanParam(name: 'v1_12', defaultValue: false, description: 'maintenance/v1.12 branch (lib)')
    booleanParam(name: 'v1_13', defaultValue: false, description: 'maintenance/v1.13 branch (lib)')
    booleanParam(name: 'v1_14', defaultValue: false, description: 'maintenance/v1.14 branch (lib)')
    booleanParam(name: 'v1_16', defaultValue: false, description: 'maintenance/v1.16 branch (lib)')
    booleanParam(name: 'master', defaultValue: false, description: 'master branch (lib)')

    booleanParam(name: 'fmi_v1_9', defaultValue: false, description: 'maintenance/v1.9 branch with FMI (ripper)')
    booleanParam(name: 'fmi_v1_11', defaultValue: false, description: 'maintenance/v1.11 branch with FMI (ripper)')
    booleanParam(name: 'fmi_v1_12', defaultValue: false, description: 'maintenance/v1.12 branch with FMI (ripper)')
    booleanParam(name: 'fmi_v1_13', defaultValue: false, description: 'maintenance/v1.13 branch with FMI (ripper)')
    booleanParam(name: 'fmi_v1_14', defaultValue: false, description: 'maintenance/v1.14 branch with FMI (ripper)')
    booleanParam(name: 'fmi_v1_16', defaultValue: false, description: 'maintenance/v1.16 branch with FMI (ripper)')
    booleanParam(name: 'fmi_master', defaultValue: false, description: 'master branch with FMI (ripper)')
    booleanParam(name: 'newInst_daeMode', defaultValue: false, description: 'master branch, --daeMode with -d=newInst (ripper)')
    booleanParam(name: 'oldInst', defaultValue: false, description: 'master branch, with -d=nonewInst (ripper)')
    booleanParam(name: 'report_ripper', defaultValue: false, description: 'Generate a report for ripper without running the tests')
    booleanParam(name: 'report_lib', defaultValue: false, description: 'Generate a report for lib without running the tests')

    booleanParam(name: 'cvode', defaultValue: false, description: 'master branch, with -d=newInst and -s cvode (ripper). This is an experimental job that does not run on a fixed schedule.')
  }
  environment {
    LC_ALL = 'C.UTF-8'
  }
  stages {
    stage('test') { parallel {

      stage('v1.8.1 rml') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.v1_8_1_rml }
        }
        steps {
          test('maintenance/v1.8.1', 'v1.8.1', '', '', 'LibraryTestingLibrariesDB', true, '', true, true)
        }
      }

      stage('v1.9.0 rml') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.v1_9_0_rml }
        }
        steps {
          test('v1.9.0-rml', 'v1.9.0-rml', '', '', 'LibraryTestingLibrariesDB', true, '', true, true)
        }
      }

      stage('v1.9.1') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.v1_9_1 }
        }
        steps {
          test('v1.9.1', 'v1.9.1', '', '', 'LibraryTestingLibrariesDB', true, '', true, true)
        }
      }

      stage('v1.9.2') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.v1_9_2 }
        }
        steps {
          test('v1.9.2', 'v1.9.2', '', '', 'LibraryTestingLibrariesDB', true, '', true, true)
        }
      }

      stage('v1.9.3') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.v1_9_3 }
        }
        steps {
          test('v1.9.3', 'v1.9.3', '', '', 'LibraryTestingLibrariesDB', true, '', true, true)
        }
      }

      stage('v1.9') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.v1_9 }
        }
        steps {
          test('maintenance/v1.9', 'v1.9', '', '', 'LibraryTestingLibrariesDB', true, '', true, true)
        }
      }

      stage('v1.11') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.v1_11 }
        }
        steps {
          test('maintenance/v1.11', 'v1.11', '', '', 'LibraryTestingLibrariesDB', true, '', true, true)
        }
      }

      stage('v1.12') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.v1_12 }
        }
        steps {
          test('maintenance/v1.12', 'v1.12', '', '', 'LibraryTestingLibrariesDB', true, '', true, true)
        }
      }

      stage('v1.13') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.v1_13 }
        }
        steps {
          test('maintenance/v1.13', 'v1.13', '', '', 'LibraryTestingLibrariesDB', true, '', false, false)
        }
      }

      stage('v1.14') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.v1_14 }
        }
        steps {
          test('maintenance/v1.14', 'v1.14', '', '', 'LibraryTestingLibrariesDB', false, '', false, false)
        }
      }

      stage('v1.16') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.v1_16 }
        }
        steps {
          test('maintenance/v1.16', 'v1.16', '', '', 'LibraryTestingLibrariesDB', false, '', false, false)
        }
      }

      stage('master') {
        agent {
          node {
            label 'libraries.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.master }
        }
        steps {
          test('master', 'master', '', '', 'LibraryTestingLibrariesDB', false, '', false, false)
        }
      }

      stage('v1.9 FMI') {
        agent {
          node {
            label 'ripper.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.fmi_v1_9 }
        }
        steps {
          test('maintenance/v1.9', 'v1.9-fmi', '', omsimulatorHash(), 'LibraryTestingRipperDB', true, '', true, true)
        }
      }
      stage('v1.11 FMI') {
        agent {
          node {
            label 'ripper.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.fmi_v1_11 }
        }
        steps {
          test('maintenance/v1.11', 'v1.11-fmi', '', omsimulatorHash(), 'LibraryTestingRipperDB', true, '', true, true)
        }
      }
      stage('v1.12 FMI') {
        agent {
          node {
            label 'ripper.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.fmi_v1_12 }
        }
        steps {
          test('maintenance/v1.12', 'v1.12-fmi', '', omsimulatorHash(), 'LibraryTestingRipperDB', true, '', false, false)
        }
      }
      stage('v1.13 FMI') {
        agent {
          node {
            label 'ripper.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.fmi_v1_13 }
        }
        steps {
          test('maintenance/v1.13', 'v1.13-fmi', '', omsimulatorHash(), 'LibraryTestingRipperDB', true, '', false, false)
        }
      }
      stage('v1.14 FMI') {
        agent {
          node {
            label 'ripper.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.fmi_v1_14 }
        }
        steps {
          test('maintenance/v1.14', 'v1.14-fmi', '', omsimulatorHash(), 'LibraryTestingRipperDB', false, '', false, false)
        }
      }
      stage('v1.16 FMI') {
        agent {
          node {
            label 'ripper.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.fmi_v1_16 }
        }
        steps {
          test('maintenance/v1.16', 'v1.16-fmi', '', omsimulatorHash(), 'LibraryTestingRipperDB', false, '', false, false)
        }
      }
      stage('master FMI') {
        agent {
          node {
            label 'ripper.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.fmi_master }
        }
        steps {
          test('master', 'master-fmi', '', 'origin/master', 'LibraryTestingRipperDB', false, '', false, false)
        }
      }
      stage('newInst-daeMode') {
        agent {
          node {
            label 'ripper.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.newInst_daeMode }
        }
        steps {
          test('master', 'newInst-daeMode', 'setCommandLineOptions("-d=newInst,-frontEndUnitCheck --daeMode=true")', '', 'LibraryTestingRipperDB', false, '', false, false)
        }
      }
      stage('oldInst') {
        agent {
          node {
            label 'ripper.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.oldInst }
        }
        steps {
          test('master', 'oldInst', 'setCommandLineOptions("-d=nonewInst")', '', 'LibraryTestingRipperDB', false, '', false, false)
        }
      }
      stage('cvode') {
        agent {
          node {
            label 'ripper.openmodelica.org'
            customWorkspace 'ws/OpenModelicaLibraryTestingWork'
          }
        }
        options { skipDefaultCheckout() }
        when {
          beforeAgent true
          expression { params.cvode }
        }
        steps {
          test('master', 'cvode', 'setCommandLineOptions("-d=newInst,-frontEndUnitCheck")', '', 'LibraryTestingRipperDB', false, '-s cvode', false, false)
        }
      }
    } }
    stage('report') { parallel {
      stage('lib') {
        agent {
          dockerfile {
            label 'linux'
            dir '.CI/build-dep'
            customWorkspace 'ws/OpenModelicaLibraryTestingReport'
          }
        }
        when {
          beforeAgent true
          expression { params.v1_8_1_rml || params.v1_9_0_rml || params.v1_9_1 || params.v1_9_2 || params.v1_9_3 || params.v1_9 || params.v1_11 || params.v1_12 || params.v1_13 || params.v1_14 || params.v1_16 || params.master || params.report_lib }
        }
        environment {
          GITBRANCHES = 'v1.8.1-rml v1.9.0-rml v1.9.1 v1.9.2 v1.9.3 maintenance/v1.9 maintenance/v1.11 maintenance/v1.12 maintenance/v1.13 maintenance/v1.14 maintenance/v1.16 master'
          PYTHONIOENCODING = 'utf-8'
        }
        steps {
          sh 'rm -rf sqlite3.db *.html history'
          sh '''
          if ! test -d OpenModelica; then
            git clone https://openmodelica.org/git-readonly/OpenModelica.git
          fi
          cd OpenModelica
          git fetch
          '''
          sh 'wget -q https://libraries.openmodelica.org/sqlite3/lib/sqlite3.db'
          sh './clean-empty-omcversion-dates.py'

          sh "./all-reports.py --email --omcgitdir=OpenModelica ${env.GITBRANCHES}"
          sh "./all-plots.py ${env.GITBRANCHES}"

          sh "./report.py --branches='${env.GITBRANCHES}' configs/conf-c++.json"
          sh 'mv overview.html overview-c++.html'
          sh "./report.py --branches='${env.GITBRANCHES}' configs/conf.json configs/conf-c++.json configs/conf-old.json"
          sh 'mv overview.html overview-combined.html'
          sh "./report.py --branches='${env.GITBRANCHES}' configs/conf-old.json"
          sh "mv overview.html overview-old-libs.html"
          sh "./report.py --branches='${env.GITBRANCHES}' configs/conf.json"

          sh 'date'
          sh 'find overview*.html history -type f | wc -l'
          sh 'find overview*.html history'

          sshPublisher(publishers: [sshPublisherDesc(configName: 'LibraryTestingReports', transfers: [sshTransfer(sourceFiles: 'overview*.html,history/**')])])

        }
      }

      stage('ripper') {
        agent {
          dockerfile {
            label 'linux'
            dir '.CI/build-dep'
            customWorkspace 'ws/OpenModelicaLibraryTestingReport'
          }
        }
        when {
          beforeAgent true
          expression { params.fmi_v1_9 || params.fmi_v1_11 || params.fmi_v1_12 || params.fmi_v1_13 || params.fmi_v1_14 || params.fmi_v1_16 || params.fmi_master || params.newInst_daeMode  || params.oldInst || params.report_ripper || params.cvode }
        }
        environment {
          GITBRANCHES_FMI = 'maintenance/v1.9-fmi maintenance/v1.11-fmi maintenance/v1.12-fmi maintenance/v1.13-fmi maintenance/v1.14-fmi maintenance/v1.16-fmi master-fmi'
          GITBRANCHES_NEWINST = 'oldInst'
          GITBRANCHES_DAE = 'daemode newInst-daemode'
          PYTHONIOENCODING = 'utf-8'
        }
        steps {
          sh 'rm -f sqlite3.db *.html'
          sh '''
          if ! test -d OpenModelica; then
            git clone https://openmodelica.org/git-readonly/OpenModelica.git
          fi
          cd OpenModelica
          git fetch
          '''
          sh 'wget -q https://libraries.openmodelica.org/sqlite3/ripper/sqlite3.db'
          sh './clean-empty-omcversion-dates.py'

          sh "./all-reports.py --email --omcgitdir=OpenModelica ${env.GITBRANCHES_FMI} ${env.GITBRANCHES_NEWINST} ${env.GITBRANCHES_DAE}"
          sh "./all-plots.py ${env.GITBRANCHES_FMI} ${env.GITBRANCHES_NEWINST} ${env.GITBRANCHES_DAE}"

          sh "./report.py --branches='${env.GITBRANCHES_NEWINST}' configs/conf.json"
          sh "mv overview.html overview-newinst.html"
          sh "./report.py --branches='${env.GITBRANCHES_NEWINST}' configs/conf.json configs/conf-c++.json configs/conf-old.json"
          sh "mv overview.html overview-combined-newinst.html"
          sh "./report.py --branches='${env.GITBRANCHES_NEWINST}' configs/conf-old.json"
          sh "mv overview.html overview-old-libs-newinst.html"
          sh "./report.py --branches='${env.GITBRANCHES_NEWINST}' configs/conf-c++.json"
          sh "mv overview.html overview-c++-newinst.html"

          sh "./report.py --branches='${env.GITBRANCHES_FMI}' configs/conf.json"
          sh "mv overview.html overview-fmi.html"
          sh "./report.py --branches='${env.GITBRANCHES_FMI}' configs/conf-c++.json"
          sh "mv overview.html overview-c++-fmi.html"
          sh "./report.py --branches='${env.GITBRANCHES_FMI}' configs/conf.json configs/conf-c++.json configs/conf-old.json"
          sh "mv overview.html overview-combined-fmi.html"
          sh "./report.py --branches='${env.GITBRANCHES_FMI}' configs/conf-old.json"
          sh "mv overview.html overview-old-libs-fmi.html"

          sh "./report.py --branches='${env.GITBRANCHES_DAE}' configs/conf.json"
          sh "mv overview.html overview-dae.html"
          sh "./report.py --branches='${env.GITBRANCHES_DAE}' configs/conf-c++.json"
          sh "mv overview.html overview-c++-dae.html"
          sh "./report.py --branches='${env.GITBRANCHES_DAE}' configs/conf.json configs/conf-c++.json configs/conf-old.json"
          sh "mv overview.html overview-combined-dae.html"
          sh "./report.py --branches='${env.GITBRANCHES_DAE}' configs/conf-old.json"
          sh "mv overview.html overview-old-libs-dae.html"

          sh "./report.py --branches='cvode' configs/conf.json"
          sh "mv overview.html overview-cvode.html"

          sh 'date'
          sh 'find overview*.html history -type f | wc -l'
          sh 'find overview*.html history'

          sshPublisher(publishers: [sshPublisherDesc(configName: 'LibraryTestingReports', transfers: [sshTransfer(sourceFiles: 'overview-*.html,history/**')])])

        }
      }
    } }
    stage('cleanup') { parallel {
      // The cleanup is needed because we can't save the cleanup done in the report stage
      stage('lib') {
        agent {
          node {
            label 'libraries.openmodelica.org'
          }
        }
        when {
          beforeAgent true
          expression { params.v1_8_1_rml || params.v1_9_0_rml || params.v1_9_1 || params.v1_9_2 || params.v1_9_3 || params.v1_9 || params.v1_11 || params.v1_12 || params.v1_13 || params.v1_14 || params.v1_16 || params.master || params.report_lib }
        }
        steps {
          sh 'cp ~/TEST_LIBS_BACKUP/sqlite3.db .'
          sh './clean-empty-omcversion-dates.py'
          sh 'cp sqlite3.db ~/TEST_LIBS_BACKUP/'
        }
      }
      stage('ripper') {
        agent {
          node {
            label 'ripper.openmodelica.org'
          }
        }
        when {
          beforeAgent true
          expression { params.fmi_v1_9 || params.fmi_v1_11 || params.fmi_v1_12 || params.fmi_v1_13 || params.fmi_v1_14 || params.fmi_v1_16 || params.fmi_master || params.newInst_daeMode  || params.oldInst || params.report_ripper }
        }
        steps {
          sh 'cp ~/TEST_LIBS_BACKUP/sqlite3.db .'
          sh './clean-empty-omcversion-dates.py'
          sh 'cp sqlite3.db ~/TEST_LIBS_BACKUP/'
        }
      }
    } }
  }
}
def omsimulatorHash() {
  return '1552061d5fe27ecfa51f5289909717192b102263'
}
def installLibraries() {
  sh "rm -rf '${env.HOME}/saved_omc/libraries/.openmodelica/libraries'"
  sh "mkdir -p '${env.HOME}/saved_omc/libraries/'"
  sh "HOME='${env.HOME}/saved_omc/libraries/' /usr/bin/omc .CI/installLibraries.mos"
}
def test(branch, name, extraFlags, omsHash, sshConfig, omcompiler, extrasimflags, corbaStyle, rmlStyle) {
  sh '''
  find /tmp  -name "*openmodelica.hudson*" -exec rm {} ";" || true
  mkdir -p ~/TEST_LIBS_BACKUP
  find ~/TEST_LIBS_BACKUP -name sqlite3.*.db -mtime +7 -exec rm {} ";"

  if test -z "$WORKSPACE"; then
    echo "Odd workspace"
    exit 1
  fi
  '''
  FMI_TESTING_FLAG=""
  if (omsHash) {
    sh """
    if ! test -d OMSimulator; then
      git clone --recursive https://openmodelica.org/git-readonly/OMSimulator.git || exit 1
    fi
    cd OMSimulator || exit 1

    git fetch || exit 1
    git reset --hard "${omsHash}" || exit 1

    git rev-parse HEAD > .newhash
    echo "OMSimulator Hash: ${omsHash}"
    echo Old Hash:
    cat ~/saved_omc/OMSimulator/.githash || true

    if ! (cmp ~/saved_omc/OMSimulator/.githash .newhash); then

      git submodule update || exit 1
      git clean -fdx || exit 1
      git submodule foreach --recursive  "git fetch --tags && git reset --hard && git clean -fdxq -e /git -e /svn" || exit 1
      make config-3rdParty || exit 1
      make config-OMSimulator || exit 1
      make OMSimulator || exit 1
      mkdir -p ~/saved_omc/OMSimulator || exit 1
      cp -a * ~/saved_omc/OMSimulator/ || exit 1
      git rev-parse HEAD > ~/saved_omc/OMSimulator/.githash || exit 1

    fi
    """
    FMI_TESTING_FLAG="--fmi=true --fmisimulator=${env.HOME}/saved_omc/OMSimulator/install/linux/bin/OMSimulator --default=ulimitExe=50"
  }
  OMCPATH = "${omcompiler ? '../' : './'}OMCompiler"

  sh '''
  FREE=`df -k --output=avail "$PWD" | tail -n1`   # df -k not df -h
  if test "$FREE" -lt 31457280; then               # 30G = 30*1024*1024k
    echo "Less than 30 GB free disk space"
    exit 1
  fi;
  '''

  sh 'killall omc || true'

  sh """
  if test ! -d OpenModelica; then
    git clone --recursive https://openmodelica.org/git-readonly/OpenModelica.git OpenModelica
  fi
  if test ! -d OMCompiler; then
    git clone --recursive https://openmodelica.org/git-readonly/OMCompiler.git OMCompiler
  fi
  if test ! -d OMLibraries; then
    git clone --recursive https://openmodelica.org/git-readonly/OMLibraries.git OMLibraries
  fi
  cd OMLibraries
  git fetch
  git reset --hard origin/library-coverage

  cd ../OpenModelica
  git fetch
  rm -rf OMCompiler # Make sure the old submodule is not there
  git reset --hard origin/master
  git clean -fdx

  cd ${OMCPATH}

  if ! test -f ~/saved_omc/${name}/.nogit; then
    git reset --hard && git checkout -f "${branch}" && (git rev-parse --verify "tags/${branch}"  || (git reset --hard "origin/${branch}" && git pull)) && git fetch --tags || exit 1
    git submodule update --init --recursive --force || (rm -rf * && git reset --hard && git submodule update --init --recursive --force) || exit 1
    git submodule foreach --recursive  "git fetch --tags && git reset --hard && git clean -fdxq -e /git -e /svn" || exit 1
    git clean -fdxq || exit 1
    git submodule status --recursive
  fi

  export OPENMODELICAHOME="`pwd`/build"

  git rev-parse --verify HEAD > .newhash
  echo New Hash:
  cat .newhash
  echo Old Hash:
  cat ~/saved_omc/${name}/.githash || true
  # TODO: Create a docker image for these things instead?
  if ! (cmp ~/saved_omc/${name}/.githash .newhash || test -f ~/saved_omc/${name}/.nogit); then
    autoconf
    ./configure --with-cppruntime --without-omc --disable-modelica3d CC=clang CXX=clang++ FC=gfortran CFLAGS='-O2 -march=native' --with-omlibrary=all --with-omniORB
    time make -j9 clean
    if ! time make -j9 omc > log 2>&1; then
      cat log
      exit 1
    fi
    if ! time make -j9 runtimeCPPinstall > log 2>&1; then
      cat log
      if test "${name}" = "master"; then
        exit 1
      else
        echo "Ignoring failed C++ runtime"
      fi
    fi
    rm -rf ~/saved_omc/${name}/
    mkdir -p ~/saved_omc/${name}/
    CMD="rsync -a --delete build/ \$HOME/saved_omc/${name}/"
    echo \$CMD
    \$CMD || exit 1
    cp .newhash ~/saved_omc/${name}/.githash
  else
    rsync -a --delete ~/saved_omc/${name}/ build/ || exit 1
    echo "Restoring cached OMC version: ${name}, `cat ~/saved_omc/${name}/.githash`"
  fi
  """

  sh """
  cd OpenModelica
  rm -rf "`pwd`/${OMCPATH}/build/lib/omlibrary/"
  mkdir -p "`pwd`/${OMCPATH}/build/lib/omlibrary/"
  (cd ../OMLibraries && git rev-parse HEAD)
  if ! time make -j9 -C ../OMLibraries all BUILD_DIR="`pwd`/${OMCPATH}/build/lib/omlibrary/" > log 2>&1; then
    cat log
    exit 1
  fi
  cp -a /mnt/ReferenceFiles/ExtraLibs/packaged/* ${OMCPATH}/build/lib/omlibrary/
  if ! time make -j9 -C testsuite/ReferenceFiles > log 2>&1; then
    cat log
    exit 1
  fi

  cd ../
  rm -rf Reference-modelica.org
  ln -s /mnt/ReferenceFiles/modelica.org Reference-modelica.org
  """
  // sh 'rsync -av modelica-ro:/files/RegressionTesting/ReferenceResults Reference-modelica.org || true # exit 1'

  MSLREFERENCE="${WORKSPACE}/Reference-modelica.org/ReferenceResults/MSL/tags"
  REFERENCEFILES="${WORKSPACE}/OpenModelica/testsuite/ReferenceFiles"
  GITREPOS="${WORKSPACE}/OpenModelica/libraries/git"

  sh """
  test -d "${MSLREFERENCE}/v3.2.2+build.0-beta.3" || exit 1
  test -d "${MSLREFERENCE}/v3.2.1+build.4" || exit 1

  if test ! -d OpenModelicaLibraryTesting; then
    git clone --recursive https://openmodelica.org/git-readonly/OpenModelicaLibraryTesting.git OpenModelicaLibraryTesting
  fi
  cd OpenModelicaLibraryTesting
  git fetch
  git reset --hard origin/master

  mkdir -p "/var/www/branches/${name}/"
  """
  
  installLibraries()

  sh '''
  cp ~/TEST_LIBS_BACKUP/sqlite3.db OpenModelicaLibraryTesting/sqlite3.db
  test -s OpenModelicaLibraryTesting/sqlite3.db
  '''

  sh 'date'

  sh """
  export OPENMODELICAHOME="${WORKSPACE}/OpenModelica/${OMCPATH}/build"
  export MSLREFERENCE="${MSLREFERENCE}"
  export REFERENCEFILES="${REFERENCEFILES}"
  export GITREPOS="${GITREPOS}"
  cd OpenModelicaLibraryTesting
  # Force /usr/bin/omc as being used for generating the mos-files. Ensures consistent behavior among all tested OMC versions
  stdbuf -oL -eL time python2 ./test.py --ompython_omhome=/usr ${FMI_TESTING_FLAG} --extraflags='${extraFlags}' --extrasimflags='${extrasimflags}' --branch="${name}" --output="libraries.openmodelica.org:/var/www/branches/${name}/" --libraries='${WORKSPACE}/OpenModelica/${OMCPATH}/build/lib/omlibrary/' ${corbaStyle ? "--corba" : ""} ${rmlStyle ? "--rml" : ""} configs/conf.json configs/conf-c++.json ${params.OLD_LIBS ? "configs/conf-old.json" : ""} || (killall omc ; false) || exit 1
  """
  sh 'date'
  sh 'rm -f OpenModelicaLibraryTesting/sqlite3.db.tmp'
  sh 'ln OpenModelicaLibraryTesting/sqlite3.db OpenModelicaLibraryTesting/sqlite3.db.tmp'

  sh 'cp OpenModelicaLibraryTesting/sqlite3.db ~/TEST_LIBS_BACKUP/sqlite3.db'
  sh 'rm -f ~/TEST_LIBS_BACKUP/`date +sqlite3.%Y%m%d.db`'

  sshPublisher(publishers: [sshPublisherDesc(configName: sshConfig, transfers: [sshTransfer(removePrefix: 'OpenModelicaLibraryTesting', sourceFiles: 'OpenModelicaLibraryTesting/sqlite3.db', failOnError: true)])])

}
